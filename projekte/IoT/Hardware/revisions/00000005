Entwurf

Knoten (= Sensoren oder Aktoren)

== Brainstroming ==
 * ESP8266-01 (billigster Typ), ggf. [[http://www.schatenseite.de/2016/04/22/esp8266-witty-cloud-modul/|Whitty Cloud]] Modul (schick)
 * Batterieversorgung Alkaline / Eneloop (ggf. ergänzt durch PV)
 * Jumper für Dauerstrom (Platz für Low Drop Regler vorsehen?)
 * Stromsparen durch
  * Deepsleep (~ 200 µA)
  * ''oder'' separater Attiny zum Aufwecken (Interrupt on Port change) (~ 30 µA)
  * ''oder ''Taster in der Vcc Leitung, der von MOSFET durch ESP überbrückt wird (vermutlich << 10 µA)
 * ESP Module möglichst ohne Modifikation verwenden (Ausser LED für Betriebsspannungsanzeige auslöten)
 * Einfache Gehäusemontage (Tropfenlöcher zum Einhängen o.Ä.)
 * Vorhandene Gehäuse? Diese zweiteiligen Schraubdosen von DMB?
 * Einfacher Batterietausch

== Schaltung ==
{{attachment:knoten-sch0.4.png}}

== Funktion ==
In einem ersten Muster haben wir den ESP in Ruhe im Sleep Mode gehabt und über seine Reset Leitung geweckt. An einer Tür ist dazu ein Schleifkontakt nötig, der sowohl bei geschlossener als auch bei offener Tür nicht aktiviert ist, und nur z.B. während der Öffnungsbewegung ein mal aktiviert wird, und den ESP damit weckt.

Nachteil: Der ESP weiss nicht, ober die Tür jetzt offen oder geschlossen ist. Geeignet ist diese Methode zb. als Einbruchsalarm. Leider kann man den ESP nicht über Interrupts wecken. Deswegen haben wir den Attiny vorgesehen, der sowohl bei steigender als auch bei fallender Flanke geweckt wird, und dem ESP die aktuelle Schalterstellung melden kann. Als weiteren Vorteil bekommen wir so einen deutlich geringeren Ruhestromverbrauch, da der ESP komplett abgeschaltet werden kann.

== Betriebszustände ==
Ruhezustand:

 * Der Attiny befindet sich im Sleep-Mode
 * ESP ist abgeschaltet

Aufwachen:

 * Attiny wird durch Interrupt on Port Change aufgeweckt
 * und schaltet über den Mosfet den ESP ein

Daten übertragen:

 * Der ESP stellt mit einer festen IP-Adresse (Schneller als DNS) eine Verbindung zum Access Point her
 * und überträgt die aktuelle Schalterstellung des Sensors, die er über SWITCH_STATE vom Attiny gemeldet bekommt, zum Server

Abschalten / schlafen gehen

 * Nach erfolgreicher Übertragung bittet er den Attiny über die Leitung SHUTDOWN, ihn abzuschalten
 * Attiny schaltet den Mosfet und damit den ESP ab
 * und legt sich selber wieder schlafen

== Bestückungs- und Funktionsvarianten ==
 * ESP in Ruhe abgeschaltet:
  * Jumper 1 Pwr_Ctrl: 2-3 gesteckt
  * Jumper 2: offen
  * Jumper 5: RST via Attiny offen
 * ESP in Ruhe im Sleep Mode
  * Jumper 1 Pwr_Ctrl: 1-2 gesteckt
  * Jumper 2: gesteckt
  * Jumper 5: RST via Attiny gesteckt

ESP in Ruhe abgeschaltet: Geringer Ruhestromverbrauch (ca. 10 nA), jedoch längere Zeit beim Verbindungsaufbau. Geeignet bei sehr selten betätigten Knoten.

ESP in Ruhe im Sleep Mode: Höherer Ruhestromverbrauch (ca. 70 nA), deutlich kürzere Zeit beim Verbindungsaufbau. Geeignet bei häufig betätigten Knoten.
